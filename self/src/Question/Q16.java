package Question;import java.io.BufferedReader;import java.io.File;import java.io.FileFilter;import java.io.IOException;import java.io.InputStreamReader;public class Q16 {	public static void main(String[] args) throws IOException {		echo();		// Runtime r = Runtime.getRuntime();		// Process p = r.exec("rm /home/liubida/a.o");		// BufferedReader reader = new BufferedReader(new InputStreamReader(p		// .getInputStream()));		// reader.readLine();		// File f = new File("c:"+File.separatorChar);		// File[] fs = f.listFiles(new MyFileFilter());		// for (File file : fs) {		// System.out.println(file.getName());		// }	}	static class MyFileFilter implements FileFilter {		@Override		public boolean accept(File f) {			if (f.isFile())				return true;			return false;		}	}	static void echo() throws IOException {		BufferedReader reader = new BufferedReader(new InputStreamReader(				System.in));		String s;		while ((s = reader.readLine()) != null && s.equals("")) {		}		String[] c = s.split(" ");		int[] a = new int[c.length];		for (int i = 0; i < c.length; i++) {			a[i] = Integer.valueOf(c[i]);		}		int sum = 0;		for (int i = 0; i < a.length; i++) {			sum += a[i];			System.out.print(a[i] + " ");		}		System.out.println();		System.out.println("总天数: " + a.length);		System.out.println("总时间: " + sum + " 分钟");		System.out.println("平均: " + sum / a.length + " 分钟/天");	}	static int[] heapSort(int[] a) {		int len = a.length;		for (int i = len / 2 - 1; i >= 0; i--) {			buildHeap(a, len, i);		}		int tmp;		for (int i = len - 1; i > 0; i--) {			tmp = a[0];			a[0] = a[i];			a[i] = tmp;			buildHeap(a, i, 0);		}		return a;	}	static void buildHeap(int[] a, int len, int index) {		int lIndex = (index << 1) + 1;		int rIndex = lIndex + 1;		int max = index;		int tmp;		if (lIndex < len) {			max = a[index] > a[lIndex] ? index : lIndex;		}		if (rIndex < len) {			max = a[max] > a[rIndex] ? max : rIndex;		}		if (max != index) {			tmp = a[index];			a[index] = a[max];			a[max] = tmp;			buildHeap(a, len, max);		}	}}