package Tree;import java.util.Stack;class Node {	Integer data;	Node left;	Node right;	Node(Integer data) {		this.data = data;		this.left = null;		this.right = null;	}}public class BinSortTree {	static Node root = null;	static Stack<Node> stack = new Stack<Node>();	static void insert(Node r, Integer key) {		if (null == r) {			root = new Node(key);		} else {			if (key < r.data) {				if (null == r.left)					r.left = new Node(key);				else					insert(r.left, key);			} else {				if (null == r.right)					r.right = new Node(key);				else					insert(r.right, key);			}		}	}	static void inOrder(Node r) {		if (null == r) {			return;		}		if (null != r.left)			inOrder(r.left);		System.out.print(r.data + " ");		if (null != r.right)			inOrder(r.right);	}	static void inOrderByStack(Node r) {		if (null == r) {			return;		}		stack.clear();		Node p = r;		while (true) {			while (null != p) {				stack.push(p);				p = p.left;			}			if (stack.empty()) {				break;			}			p = stack.pop();			System.out.print(p.data+" ");			p = p.right;		}	}	public static void main(String[] args) {		String s = "889977446633220011";		char[] a = s.toCharArray();		for (int i = 0; i < a.length; i++) {			insert(BinSortTree.root, (int) (a[i] - '0'));		}//		inOrder(BinSortTree.root);		inOrderByStack(BinSortTree.root);	}}